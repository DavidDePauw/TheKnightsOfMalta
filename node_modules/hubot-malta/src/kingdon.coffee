# Description:
#   Kingdon's callbacks
#
# Dependencies:
#   None
#
# Configuration:
#   None
#
# Commands:
#   tebot sup dawg - Receive a pug
#   hubot pug bomb N - get N pugs

flipFlop = (user, sta, par, job, mat, brn) ->
  if (sta == par)
    userstate2 = brn.get "state:#{user}:#{par}"
    if (userstate2 == null)
      brn.set "state:#{user}:#{par}", true
      return false
    else
      brn.set "state:#{user}:#{par}", null
      job mat
      return true

dumpObj = (obj) ->
  o = "{"
  for own key, value of obj
    v = value
    if key == "envelope" || key == "user" #|| key == "robot"
      v = dumpObj value
    o = o + "#{key}: #{v},"
  o = o + "}"

module.exports = (robot) ->

  robot.respond /sup dawg/i, (msg) ->
    msg.http("http://pugme.herokuapp.com/random")
      .get() (err, res, body) ->
        msg.send JSON.parse(body).pug

  robot.respond /save\s+(.*)/i, (res) ->
    robot.brain.set "memory:#{msg.envelope.user.name}", res.match[1]
    res.send "OK, got it."
    
  robot.respond /recall/i, (msg) ->
    memory = robot.brain.get "memory:#{msg.envelope.user.name}"
    msg.send memory

  robot.respond /dump\s*(.*)/i, (res) ->
    o = dumpObj res
    res.send o

  robot.hear /who am i/i, (msg) ->
    msg.send "You are @#{msg.envelope.user.name}!  Did you forget?"

  robot.respond /(find|get) me a team/i, (msg) ->
    username = msg.envelope.user.name
    msg.send "OK, what programming language do you use"
    robot.brain.set "state:#{username}", "ask for language"

  robot.respond /i have an idea/i, (msg) ->
    username = msg.envelope.user.name
    msg.send "What's your idea, #{username}?"
    robot.brain.set "state:#{username}", "has an idea"

  robot.hear ///(#{robot.name}.?\s+)?(.*)///, (res) ->
    username = res.envelope.user.name
    userstate = robot.brain.get "state:#{username}"
    match = res.match[2]

    parentState = "has an idea"
    doTheJob = (mat) ->
      robot.brain.set "ideas:#{username}", mat
      ideas = robot.brain.get "ideas"
      ideas = [] if ideas == null
      ideas.push {mat, username}
      robot.brain.set "ideas", ideas
      robot.brain.set "state:#{username}", ""
      res.send "Got it."
    return null if flipFlop username, userstate, parentState, doTheJob, match, robot.brain

    parentState = "ask for language"
    saveLanguage = (mat) ->
      robot.brain.set "language:#{username}", mat
      users = robot.brain.get "users"
      users = [] if users == null
      users.push {username, language: mat}
      robot.brain.set "users", users
      res.send "Got it.  Do you know what you want to build?"
      newState = "ask if idea"
      robot.brain.set "state:#{username}", newState
      flipFlop username, newState, newState, askForIdea, match, robot.brain
    return null if flipFlop username, userstate, parentState, saveLanguage, match, robot.brain

    parentState = "ask if idea"
    askForIdea = (mat) ->
      if mat.match /yes/
        res.send "What is your idea?"
        newState = "what is idea"
        robot.brain.set "state:#{username}", newState
        flipFlop username, newState, newState, askForIdea, match, robot.brain
      else if mat.match /no/
        res.send "OK... next step"
        robot.brain.set "state:#{username}", "next"
        #
      else
        res.send "I didn't get that... yes or no?"
        flipFlop username, parentState, parentState, askForIdea, match, robot.brain
    return null if flipFlop username, userstate, parentState, askForIdea, match, robot.brain

    noop = () ->
      a = ""

    parentState = "what is idea"
    saveIdea = (mat) ->
      robot.brain.set "ideas:#{username}", mat
      res.send "Thanks, @#{username}, do you want your idea to be listed?"
      newState = "saveAdvPreference"
      robot.brain.set "state:#{username}", newState
      flipFlop username, newState, newState, noop, match, robot.brain
    flipFlop username, userstate, parentState, saveIdea, match, robot.brain

    parentState = "saveAdvPreference"
    saveAdvPreference = (mat) ->
      if mat.match /yes/
        res.send "I'll add you to the list."
        newState = "next"
        robot.brain.set "state:#{username}", newState
        robot.brain.set "listed:#{username}", true
        flipFlop username, newState, newState, noop, match, robot.brain
      else if mat.match /no/
        res.send "OK.  I won't tell anyone."
        robot.brain.set "listed:#{username}", false
        robot.brain.set "state:#{username}", "next"
      else
        res.send "I didn't get that... yes or no?"
        flipFlop username, parentState, parentState, noop, match, robot.brain
    flipFlop username, userstate, parentState, saveAdvPreference, match, robot.brain


#  robot.brain.save "team-ideas:#{msg.envelope.user.name}", idea
